//Ioanna1 Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v4.25.3
// source: users/users.proto

/* eslint-disable */
import { GrpcMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export interface EmptyUser {}

export interface UserById {
  id: string;
}

export interface UserByUsernameAndPassword {
  username: string;
  password: string;
}

export interface User {
  id: string;
  username: string;
  email: string;
  firstName: string;
  lastName: string;
}

export interface UsersGrpcServiceClient {
  findById(request: UserById): Observable<User>;

  findOneByUsernameAndPassword(request: UserByUsernameAndPassword): Observable<User>;

  findSystemUser(request: EmptyUser): Observable<User>;
}

export interface UsersGrpcServiceController {
  findById(request: UserById): Promise<User> | Observable<User> | User;

  findOneByUsernameAndPassword(
    request: UserByUsernameAndPassword
  ): Promise<User> | Observable<User> | User;

  findSystemUser(request: EmptyUser): Promise<User> | Observable<User> | User;
}

export function UsersGrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['findById', 'findOneByUsernameAndPassword', 'findSystemUser'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod('UsersGrpcService', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      // GrpcStreamMethod is not used, so this block can be removed or commented out
    }
  };
}

export const USERS_GRPC_SERVICE_NAME = 'UsersGrpcService';